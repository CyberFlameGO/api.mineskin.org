openapi: 3.0.3
info:
  title: MineSkin API
  version: 0.0.0
  contact:
    name: inventivetalent
    url: https://discord.gg/nzAdvPc
    email: info@mineskin.org
  license:
    name: MIT
    url: https://github.com/MineSkin/api.mineskin.org/blob/master/LICENSE
servers:
  - url: https://api.mineskin.org
tags:
  - name: generate
  - name: get
  - name: util
components:
  schemas:
    PartialSkinInfo:
      type: object
      required: [ id, name, url, time ]
      properties:
        id:
          type: integer
        name:
          type: string
        url:
          type: string
        time:
          type: integer
    SkinInfo:
      type: object
      required: [ id, model, data ]
      properties:
        id:
          type: integer
        idStr:
          type: string
        uuid:
          type: string
        name:
          type: string
        model:
          type: string
          deprecated: true
          enum: [ "slim", "steve", "unknown" ]
        variant:
          type: string
          enum: [ "classic", "slim" ]
        data:
          $ref: '#/components/schemas/SkinData'
        timestamp:
          type: number
        duration:
          type: number
        accountId:
          type: integer
          deprecated: true
        account:
          type: integer
        server:
          type: string
        private:
          type: boolean
        views:
          type: number
    SkinData:
      type: object
      properties:
        uuid:
          type: string
        texture:
          $ref: '#/components/schemas/TextureInfo'
    TextureInfo:
      type: object
      properties:
        value:
          type: string
        signature:
          type: string
        url:
          type: string
    Stats:
      type: object
      properties:
        server:
          type: string
        delay:
          type: number
    GenerateOptions:
      type: object
      properties:
        model:
          type: string
          enum: [ "classic", "slim" ]
          default: "classic"
        name:
          type: string
          maxLength: 20
        visibility:
          description: "Visibility of the generated skin. 0 for public, 1 for private"
          type: integer
          enum: [ 0, 1 ]
          default: 0
    UserValidation:
      type: object
      required: [ valid ]
      properties:
        valid:
          type: boolean
        uuid:
          type: string
        name:
          type: string
  responses:
    GeneratedSkin:
      description: Successfully generated skin info
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SkinInfo'
              - properties:
                  nextRequest:
                    type: integer
                  duplicate:
                    type: boolean
    DelayInfo:
      description: Delay info for the requesting client
      content:
        application/json:
          schema:
            properties:
              delay:
                type: integer
              next:
                type: integer
              nextRelative:
                type: integer
paths:
  /generate/url:
    post:
      tags:
        - generate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/GenerateOptions'
                - properties:
                    url:
                      type: string
      responses:
        200:
          $ref: '#/components/responses/GeneratedSkin'
  /generate/upload:
    post:
      tags:
        - generate
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              allOf:
                - $ref: '#/components/schemas/GenerateOptions'
                - properties:
                    file:
                      type: string
                      format: binary
      responses:
        200:
          $ref: '#/components/responses/GeneratedSkin'
  /generate/user:
    post:
      tags:
        - generate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/GenerateOptions'
                - properties:
                    uuid:
                      type: string
                      minLength: 32
                      maxLength: 36
      responses:
        200:
          $ref: '#/components/responses/GeneratedSkin'

  /get/delay:
    get:
      tags:
        - get
      responses:
        200:
          $ref: '#/components/responses/DelayInfo'
  /get/id/{id}:
    get:
      tags:
        - get
      parameters:
        - name: id
          in: path
          required: true
      responses:
        200:
          description: Skin Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkinInfo'
  /get/list/{page}:
    get:
      tags:
        - get
      parameters:
        - name: page
          in: path
          required: false
      responses:
        200:
          description: Skin Info List
          content:
            application/json:
              schema:
                required: [ skins, page ]
                properties:
                  skins:
                    type: array
                    items:
                      $ref: '#/components/schemas/PartialSkinInfo'
                  page:
                    type: object
                    properties:
                      index:
                        type: integer
                      amount:
                        type: integer
                      total:
                        type: integer
                  filter:
                    type: string

  /validate/name/{name}:
    get:
      tags:
        - util
      parameters:
        - name: name
          in: path
          required: true
      responses:
        200:
          description: Validation info about the requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserValidation'
  /validate/uuid/{uuid}:
    get:
      tags:
        - util
      parameters:
        - name: uuid
          in: path
          required: true
      responses:
        200:
          description: Validation info about the requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserValidation'
